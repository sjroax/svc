pipeline {
   agent any  
   
   environment {
        APP_NAME = "ap1"
        SERVICE_NAME = "svc1"
	min_count = 1
	health_path = "\\/demo\\/data"
	}
   
   
   parameters { 
       choice(name: 'ACTION', choices: ['INIT', 'DEPLOY', 'START', 'STOP', 'DELETE', ], description: 'SELECT THE ACTION YOU WANT TO PERFORM WITH THIS SERVICE ') 
       choice(name: 'SELECT_ENV', choices: ['test-env', 'prod-env', ], description: 'SELECT THE ENV OF THE SERVICE  ')
   }
   
   stages {

	  stage("Service Existence Check"){
		
		steps{

		withAWS(credentials: 'aws-credentials', region: 'us-east-1') {
			sh '''

			svc_exist=0
			app_exist=0
			env_exist=0
			
			if [[ $(copilot app ls | grep $APP_NAME) == $APP_NAME ]]; 
			then 
				app_exist=1
				if [[ $(copilot env ls --app $APP_NAME | grep $SELECT_ENV ) == $SELECT_ENV ]]; 
				then 
					env_exist=1
					if [[ $(copilot svc ls -a $APP_NAME | awk '{print $1}' | grep $SERVICE_NAME ) == $SERVICE_NAME ]]; 
					then 
						if [[ $(copilot svc show --app $APP_NAME  --name $SERVICE_NAME --json | jq '.configurations[].environment' | sed 's/\"//g' | grep $SELECT_ENV) == $SELECT_ENV ]]; 
						then 
							svc_exist=1
						fi
					fi
				fi
			fi

			
			echo -e "app_exist=$app_exist\nenv_exist=$env_exist\nsvc_exist=$svc_exist" > ./variable.tmp
			

			if [[ "$ACTION" == "INIT"  ]] && [[ $svc_exist == 1  ]]; 
			then 
				echo "Service Already exist. Please choose the Action other than INIT for this service"
				exit 1
			elif [[ "$ACTION" != "INIT"  ]] && [[ $svc_exist == 0  ]];
			then
				echo "Service does not exist. Please Initialize the service by re-running the pipleline and select the INIT action"
				exit 1
			else
				echo "Continue the execution in next stage"
			fi

			
			
			'''
		}
			}
	  	}

	  stage("Action Execution"){
		
		steps{
		withAWS(credentials: 'aws-credentials', region: 'us-east-1') {
			script{
			
				switch (ACTION) {
					case "INIT":
					
						sh ''' 
						
						source ./variable.tmp
						
						if [[ $app_exist == 0 ]]; 
						then 
							copilot app init $APP_NAME
							copilot env init --app $APP_NAME --name $SELECT_ENV --profile default --default-config
							copilot env deploy --app $APP_NAME --name $SELECT_ENV
							copilot svc init --app $APP_NAME --name $SERVICE_NAME --svc-type "Load Balanced Web Service" --dockerfile ./Dockerfile
							mvn clean install
							sudo copilot svc deploy --app $APP_NAME --env $SELECT_ENV --name $SERVICE_NAME
	
						elif [[ $app_exist == 1  ]] && [[ $env_exist == 0  ]];
						then
							copilot env init --app $APP_NAME --name $SELECT_ENV --profile default --default-config
							copilot env deploy --app $APP_NAME --name $SELECT_ENV
							copilot svc init --app $APP_NAME --name $SERVICE_NAME --svc-type "Load Balanced Web Service" --dockerfile ./Dockerfile
							mvn clean install
							sudo copilot svc deploy --app $APP_NAME --env $SELECT_ENV --name $SERVICE_NAME
						else
							copilot svc init --app $APP_NAME --name $SERVICE_NAME --svc-type "Load Balanced Web Service" --dockerfile ./Dockerfile
							mvn clean install
							sudo copilot svc deploy --app $APP_NAME --env $SELECT_ENV --name $SERVICE_NAME
						fi
						
						'''
            
					break

					case "DEPLOY":
       
						sh ''' 
						
						mvn clean install
						sudo copilot svc deploy --app $APP_NAME --env $SELECT_ENV --name $SERVICE_NAME
						
						'''
					
					break

					case "START":
        
						sh '''
						
						mvn clean install
						sudo copilot svc deploy --app $APP_NAME --env $SELECT_ENV --name $SERVICE_NAME
						
						'''
 
					break

					case "STOP":
					
						sh '''
						
						sed -i 's/count: $min_count/count: 0/g' "copilot/$SERVICE_NAME/manifest.yml"
						sed -i "s/healthcheck: '$health_path'/healthcheck:/g" "copilot/$SERVICE_NAME/manifest.yml"
						mvn clean install
						sudo copilot svc deploy --app $APP_NAME --env $SELECT_ENV --name $SERVICE_NAME
					
						'''
					
					break

					case "DELETE":
						
						sh '''
						
						copilot svc delete --app $APP_NAME --env $SELECT_ENV --name $SERVICE_NAME --yes
						
						'''

					break

					default:
						
						echo "Selected Action is ${params.ACTION}"
}
			
			}
			}
			}
		}
		
     }
}


